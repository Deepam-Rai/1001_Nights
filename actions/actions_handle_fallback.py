from pathlib import Pathfrom typing import Any, Text, Dict, Listfrom rasa_sdk import Action, Trackerfrom rasa_sdk.executor import CollectingDispatcherfrom actions.constants import TILL_NOWfrom actions.prompts.utils import load_prompt_templateimport loggingfrom actions.utils import get_metadata, get_conversation_historyfrom actions.utils_llm import query_llm_jsonlogger = logging.getLogger(__name__)class ActionHandleFallback(Action):    def name(self) -> Text:        return "action_handle_fallback"    async def run(            self,            dispatcher: CollectingDispatcher,            tracker: Tracker,            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:        max_turns = 5        conversation_history = get_conversation_history(            tracker=tracker,            human_prefix="User",            ai_prefix="AI",            max_turns=max_turns        )        metadata = get_metadata(tracker.events)        till_now = metadata.get(TILL_NOW, "")        # taking only last two sentences of the story to decrease prompt size.        scoped_text = till_now.split(".")[-2:]        scoped_text = ". ".join(scoped_text)        latest_message = tracker.latest_message.get("text")        template = load_prompt_template(filename="fallback.jinja2", templates_path=Path("actions/prompts"))        rendered_template = template.render({            "conversation_history_max_turns": max_turns,            "conversation_history": conversation_history,            "current_story": scoped_text,            "latest_message": latest_message        })        response = query_llm_json(prompt=rendered_template)        if response.get("response", "") != "":            dispatcher.utter_message(response.get("response"))        if response.get("alter_story", "") != "":            dispatcher.utter_message(response.get("alter_story"))        if response.get("add_story", "") != "":            dispatcher.utter_message(response.get("add_story"))        response["scoped_text"] = scoped_text        dispatcher.utter_message(json_message={"data": {"story_update": response}})        return []